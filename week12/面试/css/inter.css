@charset "UTF-8";
* {
    padding: 0;
    margin: 0;
}

body {
    background: #DFDEDE;
}

xmp {
    display: inline;
}


/*页面整体样式*/

.wallper {
    width: 90%;
    min-width: 1140px;
    background: white;
    margin: 0 auto;
    font-size: 15px;
    font-family: "微软雅黑";
}

.header,
.article,
.footer {
    width: 100%;
}


/*头部样式*/

.header {
    height: 70px;
    line-height: 70px;
    margin: 0px auto;
    border-bottom: 4px solid #38C05D;
}

.header img {
    width: 113px;
    height: 47px;
    float: left;
    margin-left: 50px;
    margin-top: 10px;
}

.header h1 {
    margin: 0 auto;
    width: 290px;
}


/*正文样式*/

.article {
    margin-top: 20px;
    overflow: hidden;
    width: 90%;
    margin: 0 auto;
    line-height: 30px;
}

.answer {
    background: #DFDEDE;
}


/*页脚样式*/

.footer {
    height: 50px;
    line-height: 50px;
    background: #CDF6D9;
    font-size: 12px;
    color: #999;
    margin: 0 auto;
    text-align: center;
}

.footer a {
    text-decoration: none;
    color: #999;
}


/*# sourceMappingURL=inter.css.map */

<li> <h3>eval是做什么的？</h3> <div class="answer">它的功能是把对应的字符串解析成JS代码并运行； 应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。 </div> </li> <li> <h3>null，undefined 的区别？</h3> <div class="answer">undefined: 用来告诉你缺少某事物。 typeof undefined=> "undefined" 注意： 应该只给Javascript使用undefined，而不应该将某值设为undefined， 如果想要表示某变数值仍然无法使用，应该使用null。 <br>null: 给你知道目前仍然无法使用某《可能会出现的值》。 typeof null=> object 注意： 在验证null时，一定要使用===，因为==无法分别 null 和 undefined </div> </li> <li> <h3>什么是闭包（closure），为什么要用它？</h3> <div class="answer">闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量 <br> 闭包的特性： <br> <li>1.函数内再嵌套函数</li> <li>2.内部函数可以引用外层的参数和变量</li> <li>3.参数和变量不会被垃圾回收机制回收</li> </div> </li> <li> <h3>new操作符具体干了什么呢?</h3> <div class="answer"> <li>1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</li> <li>2、属性和方法被加入到 this 引用的对象中。</li> <li>3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</li> <pre>var obj= {}

;
<br>obj.__proto__=Base.prototype;
<br>Base.call(obj);
</pre> </div> </li> <li> <h3>JSON 的了解？</h3> <div class="answer">JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 它是基于JavaScript的一个子集。数据格式简单,
易于读写,
占用带宽小 如： {
    "age": "12", "name": "back"
}

</div> </li> <li> <h3>js延迟加载的方式有哪些？</h3> <div class="answer">defer和async、动态创建DOM方式（用得最多）、按需异步载入js </div> </li> <li> <h3>Ajax 是什么? 如何创建一个Ajax？</h3> <div class="answer">ajax的全称：Asynchronous Javascript And XML。 异步传输+js+xml。 所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。 <br> <li>(1)创建XMLHttpRequest对象,
也就是创建一个异步调用对象</li> <li>(2)创建一个新的HTTP请求,
并指定该HTTP请求的方法、URL及验证信息</li> <li>(3)设置响应HTTP请求状态变化的函数</li> <li>(4)发送HTTP请求</li> <li>(5)获取异步调用返回的数据</li> <li>(6)使用JavaScript和DOM实现局部刷新</li> </div> </li> <li> <h3>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</h3> <div class="answer"> <dl> <dd>（1）创建新节点</dd> <dt>createDocumentFragment() //创建一个DOM片段</dt>
<dt> createElement() //创建一个具体的元素</dt>
<dt>createTextNode() //创建一个文本节点</dt>
</dl> <dl> <dd>添加、移除、替换、插入</dd> <dt>appendChild()</dt> <dt>removeChild()</dt> <dt>replaceChild()</dt> <dt>insertBefore() //在已有的子节点前插入一个新的子节点</dt>
</dl> <dl> <dd>查找</dd> <dt>getElementsByTagName() //通过标签名称</dt>
<dt>getElementsByName() //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</dt>
<dt> getElementById() //通过元素Id，唯一性</dt>
</dl> </div> </li> <li> <h3>jquery 中如何将数组转化为json字符串，然后再转化回来？</h3> <div class="answer">jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展： <Br> <pre> $.fn.stringifyArray=function(array) {
    <br> return JSON.stringify(array)<br>
}

<br> <br> $.fn.parseArray=function(array) {
    <br> return JSON.parse(array)<br>
}

<br> <br> 然后调用：<br> $("").stringifyArray(array<br></pre> </div> </li> <li> <h3>针对 jQuery 的优化方法？</h3> <div class="answer"> <li>*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。</li> <li>*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。 <br> 比如：var str=$("a").attr("href");
</li> <li><pre>*for (var i=size;
i < arr.length;
i++) {}

<br>for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：<br>for (var i=size, length=arr.length;
i < length;
i++) {}

</pre></li> </div> </li> <li> <h3>那些操作会造成内存泄漏</h3> <div class="answer">内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。 垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。 setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。 闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环） </div> </li> <li> <h3>WEB应用从服务器主动推送Data到客户端有那些方式？</h3> <div class="answer"> <li>html5提供的Websocket</li> <li>不可见的iframe</li> <li>WebSocket通过Flash</li> <li>XHR长时间连接</li> <li>XHR Multipart Streaming</li> <li>&lt;
script&gt;
标签的长时间连接(可跨域)</li> </div> </li>
